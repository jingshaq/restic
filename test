extern crate winapi;

use std::io::Error;
use std::mem;
use std::ptr;
use winapi::shared::minwindef::{DWORD, LPVOID};
use winapi::shared::ntdef::{HANDLE, NULL};
use winapi::um::fileapi::{CreateFileA, ReadFile, SetFilePointerEx};
use winapi::um::handleapi::CloseHandle;
use winapi::um::winbase::{FILE_BEGIN, FILE_SHARE_READ, FILE_SHARE_WRITE};
use winapi::um::winnt::{FILE_ATTRIBUTE_NORMAL, GENERIC_READ};

const SECTOR_SIZE: usize = 512;

pub struct DiskReader {
    handle: HANDLE,
}

impl DiskReader {
    pub fn new(disk_number: u32) -> Result<DiskReader, Error> {
        let disk_path = format!(r#"\\.\PhysicalDrive{}"#, disk_number);
        let handle = unsafe {
            CreateFileA(
                disk_path.as_ptr() as *const i8,
                GENERIC_READ,
                FILE_SHARE_READ | FILE_SHARE_WRITE,
                ptr::null_mut(),
                3,
                FILE_ATTRIBUTE_NORMAL,
                NULL,
            )
        };
        if handle == INVALID_HANDLE_VALUE {
            return Err(Error::last_os_error());
        }
        Ok(DiskReader { handle })
    }

    pub fn read_sector(&self, sector: i64, buffer: &mut [u8]) -> Result<(), Error> {
        if buffer.len() < SECTOR_SIZE {
            return Err(Error::new(
                ErrorKind::InvalidInput,
                "Buffer size is less than sector size",
            ));
        }
        let mut overlapped = unsafe { mem::zeroed() };
        let mut bytes_read = 0;
        let offset: i64 = sector * SECTOR_SIZE as i64;
        unsafe {
            let mut li: LARGE_INTEGER = mem::zeroed();
            li.QuadPart = offset;
            SetFilePointerEx(self.handle, li, ptr::null_mut(), FILE_BEGIN);
            if ReadFile(
                self.handle,
                buffer.as_mut_ptr() as LPVOID,
                buffer.len() as DWORD,
                &mut bytes_read,
                &mut overlapped,
            ) == 0
            {
                return Err(Error::last_os_error());
            }
        }
        Ok(())
    }
}

impl Drop for DiskReader {
    fn drop(&mut self) {
        unsafe { CloseHandle(self.handle) };
    }
}
use std::io::Error;

fn main() -> Result<(), Error> {
    let disk_number = 0; // 磁盘编号
    let sector = 0; // 扇区编号
    let mut buffer = [0u8; 512]; // 缓冲区

    let reader = DiskReader::new(disk_number)?;
    reader.read_sector(sector, &mut buffer)?;

    // 在此处处理读取到的数据
    println!("Data: {:?}", &buffer[..]);

    Ok(())
}
